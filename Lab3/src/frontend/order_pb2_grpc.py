# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import order_pb2 as order__pb2


class OrderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.buyOrder = channel.unary_unary(
                '/order.Order/buyOrder',
                request_serializer=order__pb2.BuyRequest.SerializeToString,
                response_deserializer=order__pb2.BuyResponse.FromString,
                )
        self.GetOrder = channel.unary_unary(
                '/order.Order/GetOrder',
                request_serializer=order__pb2.GetRequest.SerializeToString,
                response_deserializer=order__pb2.GetResponse.FromString,
                )
        self.IsAlive = channel.unary_unary(
                '/order.Order/IsAlive',
                request_serializer=order__pb2.EmptyRequest.SerializeToString,
                response_deserializer=order__pb2.IsAliveResponse.FromString,
                )
        self.NotifyReplica = channel.unary_unary(
                '/order.Order/NotifyReplica',
                request_serializer=order__pb2.NotifyReplicaRequest.SerializeToString,
                response_deserializer=order__pb2.BoolResponse.FromString,
                )
        self.SynchronizeOrder = channel.unary_unary(
                '/order.Order/SynchronizeOrder',
                request_serializer=order__pb2.SyncData.SerializeToString,
                response_deserializer=order__pb2.BoolResponse.FromString,
                )
        self.IsLeader = channel.unary_unary(
                '/order.Order/IsLeader',
                request_serializer=order__pb2.EmptyRequest.SerializeToString,
                response_deserializer=order__pb2.BoolResponse.FromString,
                )
        self.DataToSync = channel.unary_unary(
                '/order.Order/DataToSync',
                request_serializer=order__pb2.DataToSyncRequest.SerializeToString,
                response_deserializer=order__pb2.SyncData.FromString,
                )


class OrderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def buyOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsAlive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynchronizeOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DataToSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'buyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.buyOrder,
                    request_deserializer=order__pb2.BuyRequest.FromString,
                    response_serializer=order__pb2.BuyResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=order__pb2.GetRequest.FromString,
                    response_serializer=order__pb2.GetResponse.SerializeToString,
            ),
            'IsAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAlive,
                    request_deserializer=order__pb2.EmptyRequest.FromString,
                    response_serializer=order__pb2.IsAliveResponse.SerializeToString,
            ),
            'NotifyReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyReplica,
                    request_deserializer=order__pb2.NotifyReplicaRequest.FromString,
                    response_serializer=order__pb2.BoolResponse.SerializeToString,
            ),
            'SynchronizeOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SynchronizeOrder,
                    request_deserializer=order__pb2.SyncData.FromString,
                    response_serializer=order__pb2.BoolResponse.SerializeToString,
            ),
            'IsLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.IsLeader,
                    request_deserializer=order__pb2.EmptyRequest.FromString,
                    response_serializer=order__pb2.BoolResponse.SerializeToString,
            ),
            'DataToSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DataToSync,
                    request_deserializer=order__pb2.DataToSyncRequest.FromString,
                    response_serializer=order__pb2.SyncData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order.Order', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Order(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def buyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/buyOrder',
            order__pb2.BuyRequest.SerializeToString,
            order__pb2.BuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/GetOrder',
            order__pb2.GetRequest.SerializeToString,
            order__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/IsAlive',
            order__pb2.EmptyRequest.SerializeToString,
            order__pb2.IsAliveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/NotifyReplica',
            order__pb2.NotifyReplicaRequest.SerializeToString,
            order__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynchronizeOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/SynchronizeOrder',
            order__pb2.SyncData.SerializeToString,
            order__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/IsLeader',
            order__pb2.EmptyRequest.SerializeToString,
            order__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DataToSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/DataToSync',
            order__pb2.DataToSyncRequest.SerializeToString,
            order__pb2.SyncData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
